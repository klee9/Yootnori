@startuml

skinparam linetype orthogonal

' name: Player의 이름
' tossYut: 랜덤하게 윷 던지기

class Player {
    - name: string
    + tossYut(): string
    + moveToken(): Token
    + setPlayerCount(): void
}

class UI {
    + getTossInput(): Toss
    + getMoveInput(): Token
    + updateUI(boardState: BoardState): void
    + displayGame(): void
    + switchToolkit(toolkitName: string): void
}

class Game {
    - currentPlayer: Player
    - board: Board
    - rules: RuleSet
    - resultLog: MoveResult

    + computeToss(toss: Toss): void
    + computeMove(token: Token): void
    + forwardTossResult(): string
    + forwardMoveResult(): bool
    + updateGameState(): void
    + getState(): BoardState
}

' checkToss: 윷 던지기 결과가 "윷" 혹은 "모"인지 확인
' canMove: 말을 해당 위치로 옮길 수 있는지 확인
' canStack: 말을 업을 수 있는지 확인
' canCatch: 말을 잡을 수 있는지 확인
class RuleSet {
    + checkToss(toss: Toss): string
    + canMove(token: Token): bool
    + canStack(token: Token, pos: int): bool
    + canCatch(token: Token, pos: int): bool
}

' tokens: 말과 말의 주인을 저장하는 리스트
' updatePos: 말 위치를 최신화하는 함수
' getState: 게임의 상태를 리턴하는 함수
' transformBoard: 변경된 윷놀이 판에 따라 리스트를 조정하는 함수
class Board {
    - tokens: Map<Player, List<Token>>
    + updatePos(token: Token): void
    + getState(): BoardState
    + transformBoard(): void
    + changeBoardShape(shapeType: string): void
}

class MoveResult {
    - results: List<string>
    + appendResult(result: string): void
    + getMoveList(): List<string>
}

class Token {
    - owner: Player
    - position: int

    + getOwner(): Player
    + getPos(): int
    + setPos(pos: int): void
}

class BoardState {
    - tokenPositions: Map<Player, List<Token>>
    + getTokenPositions(): Map<Player, List<Token>>
}

' === RELATIONSHIPS ===

Player -- UI
Player -- Game
UI -- Game
Game -- RuleSet
Game -- MoveResult
Game -- Board
Game -- BoardState
Board -- BoardState

@enduml
